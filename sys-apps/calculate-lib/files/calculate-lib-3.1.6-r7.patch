diff --git calculate/lib/cl_template.py calculate/lib/cl_template.py
index a877b61..189dafe 100644
--- calculate/lib/cl_template.py
+++ calculate/lib/cl_template.py
@@ -18,6 +18,7 @@ import sys
 import os
 import stat
 import re
+import errno
 import xml.dom.minidom as minidom
 import xml
 import importlib
@@ -36,18 +37,20 @@ from itertools import *
 #                    <   <=  ==  !=  >=  >
 from operator import lt, le, eq, ne, ge, gt
 
-from utils.common import _error, _warning
+from utils.common import _error, _warning,getTupleVersion,getPortageUidGid
 from utils.text import  _toUNICODE, convertStrListDict
 from utils.portage import  isPkgInstalled,reVerSplitToPV
 from utils.content import PkgContents,checkContents,getCfgFiles,fillContents
 from utils.files import (getModeFile, listDirectory,removeDir, typeFile,
-                        scanDirectory,
+                        scanDirectory,timeout,
                         pathJoin,readFile,readLinesFile,process,STDOUT)
 from datavars import DataVarsError
 
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_lib3',sys.modules[__name__])
 
+PORTAGEUID,PORTAGEGID = getPortageUidGid()
+
 class TemplatesInterrupt(Exception):
     """
     Interrupt templates appling
@@ -2185,7 +2188,7 @@ class _file(_error):
             F_TEMPL = open(nameFileTemplate, "r")
         except:
             self.setError(_("unable to open the file:")
-                            + nameFileConfig)
+                            + nameFileTemplate)
             return False
         return F_TEMPL
 
@@ -2221,7 +2224,8 @@ class _file(_error):
         return F_CONF
 
 
-    def openFiles(self, nameFileTemplate, nameFileConfig, typeFormat=None):
+    def openFiles(self, nameFileTemplate, nameFileConfig, typeFormat=None,
+                    newBuffer=None):
         """Открывает шаблон и конфигурационный файл"""
         self.textConfig = ""
         self.textTemplate = ""
@@ -2238,7 +2242,10 @@ class _file(_error):
             if self.configMode == T_NEWCFG:
                 origConfigName = re.sub(r'/._cfg\d{4}_([^/]+)$','/\\1',
                             self.nameFileConfig)
-                self.textConfig = readFile(origConfigName)
+                if newBuffer is None:
+                    self.textConfig = readFile(origConfigName)
+                else:
+                    self.textConfig = newBuffer
             else:
                 self.textConfig = self.F_CONF.read()
 
@@ -2786,7 +2793,7 @@ class templateFunction(_error, _warning, _shareTemplate, _shareTermsFunction):
         if os.path.exists(fileName):
             FD = open(fileName)
             replace = FD.read().strip()
-            FD.close
+            FD.close()
         if replace and lenTerms >= 2 and terms[0] == "empty":
            replace ="\n".join(filter(lambda x: not self.reEmptyLoad.search(x),
                               replace.split("\n")))
@@ -2842,7 +2849,7 @@ class templateFunction(_error, _warning, _shareTemplate, _shareTermsFunction):
             if len(versions) == 1:
                 return versions.values()[0]
             else:
-                return versions[max(versions.keys())]
+                return versions[max(versions.keys(),key=getTupleVersion)]
         else:
             return ""
 
@@ -3091,7 +3098,7 @@ class templateFunction(_error, _warning, _shareTemplate, _shareTermsFunction):
         return textTemplateTmp
         self.printERROR(_(funArgv))
         raise TemplatesInterrupt(_("Execution of templates was "
-                                   "interrupted with the error"),
+                                   "interrupted with an error"),
                                  TemplatesInterrupt.ABORT)
 
     def getElogTimestamp(self):
@@ -3446,8 +3453,7 @@ class templateFunction(_error, _warning, _shareTemplate, _shareTermsFunction):
         for portdir in queuePortdir():
             if not portdir in self.cachePortdir:
                 lPortdir = len(portdir)+1
-                self.cachePortdir[portdir] = \
-                    list(set(
+                self.cachePortdir[portdir] = list(set(
                     map(lambda x:x[lPortdir:].rpartition('/')[0],
                     glob.glob("%s/*/*/*.ebuild"%portdir))))
             if package in self.cachePortdir[portdir]:
@@ -3764,7 +3770,8 @@ class templateFunction(_error, _warning, _shareTemplate, _shareTermsFunction):
             # Меняем владельца в случае необходимости
             if os.path.exists(self.fileConfigIni):
                 uid, gid = getModeFile(self.fileConfigIni, "owner")
-                if self.uid!=uid or self.gid!=gid:
+                if not self.uid in (uid,PORTAGEUID) or \
+                    not self.gid in (gid,PORTAGEGID):
                     os.chown(self.fileConfigIni, self.uid, self.gid)
         return textTemplateTmp
 
@@ -4318,7 +4325,7 @@ gettext -d cl_template "$*"
             self.printWARNING("")
             self.printWARNING(_("Headers of directory templates and headers "
                          "of files on the first level should include "
-                         "an action variable."))
+                         "an action variable"))
             self.printWARNING(_("Example:"))
             self.printWARNING("# Calculate ac_install_merge==on")
         return skipDirs + skipTemplates
@@ -4578,7 +4585,7 @@ gettext -d cl_template "$*"
         self.filesApply = map(lambda x:autoUpdateDict.get(x,x),self.filesApply)
         if filter(lambda x:"._cfg" in x, self.filesApply):
             self.printWARNING(_("Some config files need updating. "
-                                "Perform dispatch-conf."))
+                                "Perform run dispatch-conf."))
             if self.dispatchConf and \
                 self.objVar.Get('cl_dispatch_conf') == 'dispatch' and \
                 self.objVar.Get('cl_ebuild_phase') == '':
@@ -4811,7 +4818,7 @@ gettext -d cl_template "$*"
         if not objHead.headerTerm:
             if objHead.getError():
                 self.setError(_("Incorrect template") + ": " +\
-                               templateDirFile)
+                              templateDirFile)
             return ("", False, [])
 
         # add packeges for reconfigure
@@ -4821,7 +4828,7 @@ gettext -d cl_template "$*"
                              if not self.functObj.checkCorrectPkgName(x)):
                 self.printWARNING(
                     _("Wrong package '%s' for 'merge' in the template")%
-                              wrongPkg + ": " + nameFileTemplate)
+                              wrongPkg + ": " + templateDirFile)
             for pkg in mergePkgs:
                 if not pkg in self.objVar.Get('cl_merge_pkg_new') and \
                    not pkg in self.objVar.Get('cl_merge_pkg_pass') and \
@@ -5135,7 +5142,7 @@ gettext -d cl_template "$*"
             self.F_TEMPL = self.openTemplFile(self.nameFileTemplate)
             if not self.F_TEMPL:
                 self.setError(_("Failed to open the template") + ": " +\
-                                   templateDirFile)
+                                   self.nameFileTemplate)
                 return False
             self.textTemplate = self.F_TEMPL.read()
             self.closeTemplFile()
@@ -5196,6 +5203,8 @@ gettext -d cl_template "$*"
             self.objVar.Get('cl_action') != 'system':
             pathOldFile = self.fixNameFileConfig(pathOldFile)
             pathOldFile = self.checkOnNewConfigName(pathOldFile)
+        # буффер для использование в link=
+        newBuffer = None
         applyFiles = [pathOldFile]
         # Фильтрация шаблонов по названию файла
         realPath = os.path.join("/",pathOldFile.partition(self._baseDir)[2])
@@ -5226,6 +5235,7 @@ gettext -d cl_template "$*"
         if typeAppendTemplate == "clear":
             try:
                 open(pathOldFile, "w").truncate(0)
+                newBuffer = ""
             except:
                 self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
@@ -5272,6 +5282,7 @@ gettext -d cl_template "$*"
             if os.path.islink(pathOldFile):
                 # удаляем ссылку
                 try:
+                    newBuffer = ""
                     os.unlink(pathOldFile)
                 except:
                     self.setError(_("Template error") + ": " +\
@@ -5282,6 +5293,7 @@ gettext -d cl_template "$*"
             if os.path.isfile(pathOldFile):
                 # удаляем файл
                 try:
+                    newBuffer = ""
                     os.remove(pathOldFile)
                 except:
                     self.setError(_("Template error") + ": " +\
@@ -5300,6 +5312,7 @@ gettext -d cl_template "$*"
                 if not os.path.exists(templateFile):
                     if os.path.exists(pathOldFile):
                         try:
+                            newBuffer = ""
                             os.remove(pathOldFile)
                         except:
                             self.setError(_("Template error") + ": " +\
@@ -5329,6 +5342,7 @@ gettext -d cl_template "$*"
                     return ([], False)
             if os.path.exists(pathOldFile):
                 try:
+                    newBuffer = ""
                     os.remove(pathOldFile)
                 except:
                     self.setError(_("Template error") + ": " +\
@@ -5339,6 +5353,7 @@ gettext -d cl_template "$*"
             if foundTemplateFile:
                 try:
                     FD  = open(pathOldFile, "w+")
+                    newBuffer = buff
                     FD.write(buff)
                     FD.close()
                 except:
@@ -5441,7 +5456,8 @@ gettext -d cl_template "$*"
                 preReturn(pathProg)
                 return ([], False)
         if not flagSymlink:
-            self.openFiles(nameFileTemplate, pathOldFile,objHeadNew.fileType)
+            self.openFiles(nameFileTemplate, pathOldFile,objHeadNew.fileType,
+                            newBuffer)
             if self.getError():
                 return ([], False)
         if not objHeadNew.params.has_key("chown"):
@@ -5498,7 +5514,7 @@ gettext -d cl_template "$*"
             not objHeadNew.params.has_key("symbolic") and\
             objHeadNew.params.has_key("link"):
                 preReturn(pathProg)
-                return ([], False)
+                return (applyFiles, False)
         if not pathOldFile in self.dictProcessedTemplates:
             self.dictProcessedTemplates[pathOldFile] = []
         self.dictProcessedTemplates[pathOldFile].append(nameFileTemplate)
@@ -6171,13 +6187,28 @@ class iniParser(_error, templateFormat):
         """установка прав создаваемого ini-файла"""
         self.mode = mode
 
+    def lockfile(self,fd,fn,timeout=5):
+        """
+        Блокировка файла с таймаутом
+        """
+        for i in range(0,timeout):
+            try:
+                fcntl.flock(fd, fcntl.LOCK_EX)
+                return True
+            except IOError,e:
+                if e.errno != errno.EAGAIN:
+                    raise e
+            time.sleep(1)
+        else:
+            raise TemplatesError(_("Timeout lock %s")%fn)
+
     def openIniFile(self):
         if not self.text is None:
             return self.text
         if not os.access(self.iniFile, os.R_OK):
             return ""
         self.FD = open(self.iniFile, "r")
-        fcntl.flock(self.FD.fileno(), fcntl.LOCK_EX)
+        self.lockfile(self.FD.fileno(),self.iniFile)
         textIni = self.FD.read()
         return textIni
 
@@ -6189,7 +6220,7 @@ class iniParser(_error, templateFormat):
         except (IOError,OSError),e:
             self.FD = open(self.iniFile, "r")
             self.readOnly = True
-        fcntl.flock(self.FD.fileno(), fcntl.LOCK_EX)
+        self.lockfile(self.FD.fileno(), self.iniFile)
         textIni = self.FD.read()
         return textIni
 
@@ -6202,7 +6233,7 @@ class iniParser(_error, templateFormat):
             try:
                 # Создание файла
                 self.FD  = open(self.iniFile, "w+")
-                fcntl.flock(self.FD.fileno(), fcntl.LOCK_EX)
+                self.lockfile(self.FD.fileno(), self.iniFile)
                 os.chmod(self.iniFile, self.mode)
             except:
                 self.setError(_("Failed to create the file") +
diff --git calculate/lib/format/diff.py calculate/lib/format/diff.py
index 70d056b..76634b3 100644
--- calculate/lib/format/diff.py
+++ calculate/lib/format/diff.py
@@ -49,7 +49,7 @@ class diff(_error):
             if patchDryRun.success():
                 return ""
         else:
-            self.setError(_("Patch failed"))
+            self.setError(_("Correction failed"))
             return False
         patchRun = process('/usr/bin/patch',
                   '-p%d'%i,cwd=rootPath)
diff --git calculate/lib/utils/common.py calculate/lib/utils/common.py
index 1799713..21d2e4f 100644
--- calculate/lib/utils/common.py
+++ calculate/lib/utils/common.py
@@ -23,6 +23,8 @@ import sys
 import getpass
 from types import StringType
 import string
+import pwd
+import grp
 
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_lib3',sys.modules[__name__])
@@ -439,7 +441,7 @@ def mountEcryptfs(userName,userPwd,userDir):
         else:
             raise Exception
     except:
-        raise CommonError("Failed to unwrap passphrase")
+        raise CommonError(_("Failed to unwrap the passphrase"))
 
     # добавить passphrase в ключи ядра
     p = process('/usr/bin/ecryptfs-add-passphrase', '--fnek', '-',stderr=STDOUT)
@@ -452,7 +454,7 @@ def mountEcryptfs(userName,userPwd,userDir):
         ecryptfs_sig, ecryptfs_fnek_sig = \
             readLinesFile(path.join(ecryptUserName,".ecryptfs/Private.sig"))
     except ValueError:
-        raise CommonError("Failed to parse Private.sig")
+        raise CommonError(_("Failed to parse Private.sig"))
 
     # подключить шифрованный раздел
     mountProcess = process('/sbin/mount.ecryptfs',
@@ -471,3 +473,23 @@ def mountEcryptfs(userName,userPwd,userDir):
     # отправить пароль через stdin
     mountProcess.write("passphrase_passwd="+userPwd)
     return mountProcess.success()
+
+def isBootstrapDataOnly(directory):
+    """
+    Каталог содержит только сертификат, созданный командой cl-core
+    """
+    from calculate.lib.utils.files import (process,readLinesFile,STDOUT,
+                                           isMount)
+    userCalculate = path.join(directory,".calculate")
+    return (set(listDirectory(directory)) == set([".calculate"]) and
+            set(listDirectory(userCalculate)) == set(["client_cert"]))
+
+def getPortageUidGid():
+    """
+    Получить uid и gid пользователя portage
+    """
+    data = pwd.getpwnam('portage')
+    if data:
+        return data.pw_uid,data.pw_gid
+    else:
+        return 250,250
diff --git calculate/lib/utils/files.py calculate/lib/utils/files.py
index 34c3bc8..167ce12 100644
--- calculate/lib/utils/files.py
+++ calculate/lib/utils/files.py
@@ -26,6 +26,23 @@ import sys
 from itertools import *
 import tarfile
 
+from contextlib import contextmanager
+import signal
+
+@contextmanager
+def timeout(seconds):
+    def timeout_handler(signum,frame):
+        pass
+
+    original_handler = signal.signal(signal.SIGALRM, timeout_handler)
+
+    try:
+        signal.alarm(seconds)
+        yield
+    finally:
+        signal.alarm(0)
+        signal.signal(signal.SIGALRM, original_handler)
+
 try:
     from magic import open as type_file, MAGIC_NONE as MAGIC_NONE
 except ImportError:
diff --git calculate/lib/utils/ip.py calculate/lib/utils/ip.py
index b704c76..e488da0 100644
--- calculate/lib/utils/ip.py
+++ calculate/lib/utils/ip.py
@@ -327,7 +327,10 @@ class Pinger:
         """
         Send one ping to the given >destIP<.
         """
-        destIP  =  socket.gethostbyname(destIP)
+        try:
+            destIP  =  socket.gethostbyname(destIP)
+        except socket.gaierror as e:
+            raise IPError(e.strerror)
 
         # Header is type (8), code (8), checksum (16), id (16), sequence (16)
         myChecksum = 0
diff --git calculate/lib/variables/env.py calculate/lib/variables/env.py
index c5f5598..f69d2c6 100644
--- calculate/lib/variables/env.py
+++ calculate/lib/variables/env.py
@@ -212,14 +212,14 @@ class VariableClDispatchConf(Variable):
     metavalue = "METHOD"
 
     def init(self):
-        self.help = "'usenew' - " +_("use new config files") +\
-                    ",\n'skip' - " + _("skip the update config files") +\
+        self.help = "'usenew' - " +_("use the new config files") +\
+                    ",\n'skip' - " + _("skip the update of config files") +\
                     ",\n'dispatch' - " + _("manually update config files")
-        self.label = _("Update config files method")
+        self.label = _("Method for updating config files")
 
     def choice(self):
-        return [("usenew",_("Use new config files")),
-                ("skip",_("Skip the update config files")),
+        return [("usenew",_("Use the new config files")),
+                ("skip",_("Skip the update of config files")),
                 ("dispatch",_("Manually update config files"))]
 
 class VariableClWsdl(Variable):
diff --git calculate/lib/variables/user.py calculate/lib/variables/user.py
index e8e378f..7b3596a 100644
--- calculate/lib/variables/user.py
+++ calculate/lib/variables/user.py
@@ -21,7 +21,7 @@ import grp
 from os import environ,path
 from calculate.lib.datavars import Variable,VariableError,ReadonlyVariable
 from calculate.lib.cl_vars_share import varsShare
-from calculate.lib.utils.common import getPasswdUsers
+from calculate.lib.utils.common import getPasswdUsers,isBootstrapDataOnly
 from calculate.lib.utils.files import listDirectory
 import sys
 from calculate.lib.cl_lang import setLocalTranslate
@@ -229,7 +229,8 @@ class VariableUrHomeCryptSet(ReadonlyVariable):
         # если пользовательского профиля нет, то шифровать ли профиль
         # узнаем на уровне системы
         homeDir = self.Get('ur_home_path')
-        if not path.exists(homeDir) or not listDirectory(homeDir):
+        if (not path.exists(homeDir) or not listDirectory(homeDir) or
+            isBootstrapDataOnly(homeDir)):
             return self.Get('cl_home_crypt_set')
         # профиль не шифрованный
         return "off"
