diff --git data/login.d/00init data/login.d/00init
index 5cbebf4..08e6339 100644
--- data/login.d/00init
+++ data/login.d/00init
@@ -26,6 +26,8 @@ else
     fi
 fi
 
+/sbin/modprobe ecryptfs
+
 if [[ "`ps axeo command | grep 'xdm/xdm --logout' | grep -v grep | \
 	sed -n -r 's/.* USER=([^ ]+) .*/\1/p'`" == "$USER" ]];
 then
diff --git data/logout.d/98umount data/logout.d/98umount
index bf3b074..f388464 100644
--- data/logout.d/98umount
+++ data/logout.d/98umount
@@ -1,4 +1,5 @@
 #!/bin/bash
 
+keyctl unlink $( keyctl request user $USER )
 umount -l /home/$USER
 exit 0
diff --git desktop/cl_desktop.py desktop/cl_desktop.py
index 11ca1de..6f0e49e 100644
--- desktop/cl_desktop.py
+++ desktop/cl_desktop.py
@@ -27,17 +27,20 @@ from datavars import DataVarsDesktop, DataVars, __version__,__app__
 
 from calculate.lib.cl_template import (Template, ProgressTemplate,
     TemplatesError,templateFunction,iniParser)
-from calculate.lib.utils.files import runOsCommand, isMount,process, \
-                        getRunCommands,STDOUT
-from calculate.lib.utils.common import getpathenv,appendProgramToEnvFile, \
-                                       removeProgramToEnvFile,mountEcryptfs, \
-                                       CommonError
+from calculate.lib.utils.files import (runOsCommand, isMount,process,
+                        getRunCommands,STDOUT,childMounts)
+from calculate.lib.utils.common import (getpathenv,appendProgramToEnvFile,
+                                       removeProgramToEnvFile,mountEcryptfs,
+                                       CommonError, isBootstrapDataOnly)
 from calculate.core.server.func import safetyWrapper
 
 from calculate.lib.cl_lang import setLocalTranslate,getLazyLocalTranslate
 setLocalTranslate('cl_desktop3',sys.modules[__name__])
 __ = getLazyLocalTranslate(_)
 from itertools import ifilter
+import tarfile
+import tempfile
+import shutil
 
 class DesktopError(Exception):
     """Desktop Error"""
@@ -72,14 +75,49 @@ class Desktop:
                     os.symlink(source,target)
             try:
                 if not mountEcryptfs(userName,userPwd,userDir):
-                    raise DesktopError(_("Failed to mount ecrypt"))
+                    raise DesktopError(_("Failed to mount ecrypted data"))
             except CommonError as e:
-                raise DesktopError(_("Failed to mount ecrypt")+": \"%s\""%str(e))
+                raise DesktopError(_("Failed to mount ecrypted data")+": \"%s\""%str(e))
         else:
-            e = process('/usr/bin/ecryptfs-setup-private','-u',userName,'-b','-l',userPwd,stderr=STDOUT)
-            if e.failed():
-                raise DesktopError(e.read()+
+            tf = None
+            try:
+                # если профиль содержит только данные от бутстрапа core
+                if isBootstrapDataOnly(userDir):
+                    if childMounts(userDir):
+                        raise DesktopError(
+                            _("Failed to create encrypt user profile")+":"+
+                            _("User home directory contains mount points"))
+                    # поместить данные во временный tarfile
+                    calculateName = ".calculate"
+                    calculatePath = path.join(userDir,calculateName)
+                    tf = tempfile.TemporaryFile()
+                    with tarfile.open(fileobj=tf,mode='w:') as tarf:
+                        tarf.add(calculatePath,calculateName)
+                    tf.flush()
+                    tf.seek(0)
+                    # удалить эти данные
+                    shutil.rmtree(calculatePath)
+
+                # создать шифрованные данные
+                e = process('/usr/bin/ecryptfs-setup-private','-u',userName,
+                            '-b','-l',userPwd,stderr=STDOUT)
+                if e.failed():
+                    raise DesktopError(e.read())
+                # если были данные от бутстрапа, то распаковать их
+                if tf:
+                    with tarfile.open(fileobj=tf,mode='r:') as tarf:
+                        tarf.extractall(userDir)
+            except Exception as e:
+                if tf:
+                    tf.seek(0)
+                    bakArchName = path.join(userDir,".calculate.tar.bz2")
+                    with open(bakArchName,'w') as f:
+                        f.write(tf.read())
+                raise DesktopError(str(e)+
                     _("Failed to create encrypt user profile"))
+            finally:
+                if tf:
+                    tf.close()
 
     def createUserDir(self, userName, uid, gid, userDir, mode=0700):
         """
@@ -200,7 +238,8 @@ class Desktop:
             self.startTask(_("Creating the home directory for %s")%self.homeDir)
             self.createUserDir(userName,uid,gid,self.homeDir)
             self.endTask()
-        if self.clVars.Get('ur_home_crypt_set') == 'on':
+        if (self.clVars.Get('ur_home_crypt_set') == 'on' and
+            self.clVars.Get('install.cl_autologin') != userName):
             self.createCryptDir(userName,uid,gid,self.homeDir)
 
         domainUser = self.clVars.Get('ur_domain_set') == 'on'
@@ -278,7 +317,7 @@ class Desktop:
         return True
 
     @safetyWrapper(native_errors=(TemplatesError,DesktopError),
-                   man_int=__("Logout manually interrupted"),
+                   man_int=__("Logout aborted"),
                    post_action=umountUserRes,
                    success_message=__("The user logged out from the session!"),
                    failed_message=__("Unable to logout the user"))
@@ -295,18 +334,18 @@ class Desktop:
                     where='cl_desktop_online_user',eq=urLogin,limit=1)
         session = self.clVars.Get('cl_desktop_xsession')
         if session == 'xfce':
-            logoutCommand = "org.xfce.SessionManager " \
+            logoutCommand = "/usr/bin/qdbus org.xfce.SessionManager " \
                 "/org/xfce/SessionManager Logout False False"
         elif session == 'kde':
-            logoutCommand = "org.kde.ksmserver /KSMServer logout 0 0 0"
+            logoutCommand = "/usr/bin/kquitapp ksmserver"
         elif session == 'gnome':
-            logoutCommand = "org.gnome.SessionManager " \
+            logoutCommand = "/usr/bin/qdbus org.gnome.SessionManager " \
                 "/org/gnome/SessionManager Logout 1"
         else:
-            raise DesktopError(_("Unable detect X session"))
+            raise DesktopError(_("Unable to detect the X session"))
         if process("su",urLogin,"-c",
-            ("DISPLAY=:%s /usr/bin/qdbus "%display)+logoutCommand).failed():
-            raise DesktopError(_("Unable send logout command"))
+            ("DISPLAY=:%s "%display)+logoutCommand).failed():
+            raise DesktopError(_("Unable to send the logout command"))
         for i in range(0,20):
             if filter(lambda x: "xdm/xdm\x00--logout" in x,
                     getRunCommands()):
diff --git desktop/cl_wsdl_desktop.py desktop/cl_wsdl_desktop.py
index 2e5f09d..66e1a90 100644
--- desktop/cl_wsdl_desktop.py
+++ desktop/cl_wsdl_desktop.py
@@ -81,7 +81,7 @@ class Wsdl:
         return view
 
     @rpc(Integer, DesktopInfo, _returns = Array(ReturnedMessage))
-    @core_method(category=__('Desktop'),title=__('Logout user'),
+    @core_method(category=__('Desktop'),title=__('User logout'),
         image='system-log-out',
         gui=True,command='cl-desktop-logout',
         rights=['userconfigure'])
